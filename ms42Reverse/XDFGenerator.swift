//
//  XDFGenerator.swift
//  ms42Reverse
//
//  Created by Richard on 9/8/2025.
//

import Foundation

final class XDFGenerator {
    func makeXDF(maps: [DetectedMap], knownRawByOffset: [Int: String] = [:]) -> String {
        var xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
        xml += "<XDFFORMAT version=\"1.70\">\n"
        xml += "  <XDFHEADER flags=\"0\" description=\"Generated by ms42-reverse\" baseoffset=\"0\" datasizeinbits=\"16\" />\n"
        for m in maps {
            // If we have the original raw XDF table for this offset, prefer to insert it unchanged
            if let raw = knownRawByOffset[m.offset] {
                xml += raw + "\n"
                continue
            }
            // Compose description with offset and dimensions
            let desc = "Offset 0x\(String(m.offset, radix: 16)), \(m.rows)x\(m.cols)"
            xml += "  <XDFTABLE>\n"
            xml += "    <title>\(escape(m.name))</title>\n"
            xml += "    <description>\(escape(desc))</description>\n"
            xml += "    <flags>0</flags>\n"
            xml += "    <mmedaddress>\(m.offset)</mmedaddress>\n"
            xml += "    <datatype>0</datatype>\n"
            xml += "    <indexcountx>\(m.cols)</indexcountx>\n"
            xml += "    <indexcounty>\(m.rows)</indexcounty>\n"
            xml += "    <elementsizebits>\(m.elementSize * 8)</elementsizebits>\n"
            xml += "    <unittype>Generic</unittype>\n"
            // X Axis (id=0)
            xml += "    <XDFAXIS id=\"0\">\n"
            xml += "      <labels>\n"
            if let ax = m.axisX, ax.count == m.cols {
                for v in ax {
                    xml += "        <label>\(escape(String(describing: v)))</label>\n"
                }
            } else {
                for i in 0..<m.cols {
                    xml += "        <label>\(i)</label>\n"
                }
            }
            xml += "      </labels>\n"
            xml += "    </XDFAXIS>\n"
            // Y Axis (id=1)
            xml += "    <XDFAXIS id=\"1\">\n"
            xml += "      <labels>\n"
            if let ay = m.axisY, ay.count == m.rows {
                for v in ay {
                    xml += "        <label>\(escape(String(describing: v)))</label>\n"
                }
            } else {
                for i in 0..<m.rows {
                    xml += "        <label>\(i)</label>\n"
                }
            }
            xml += "      </labels>\n"
            xml += "    </XDFAXIS>\n"
            // Z Axis (id=2, values)
            xml += "    <XDFAXIS id=\"2\">\n"
            xml += "      <values>\n"
            for r in 0..<m.rows {
                xml += "        <row>\n"
                for c in 0..<m.cols {
                    let idx = r * m.cols + c
                    let v: Any
                    if idx < m.values.count {
                        v = m.values[idx]
                    } else {
                        v = 0
                    }
                    xml += "          <v>\(v)</v>\n"
                }
                xml += "        </row>\n"
            }
            xml += "      </values>\n"
            xml += "    </XDFAXIS>\n"
            xml += "  </XDFTABLE>\n"
        }
        xml += "</XDFFORMAT>\n"
        return xml
    }

    private func escape(_ s: String) -> String {
        var s = s
        s = s.replacingOccurrences(of: "&", with: "&amp;")
        s = s.replacingOccurrences(of: "<", with: "&lt;")
        s = s.replacingOccurrences(of: ">", with: "&gt;")
        s = s.replacingOccurrences(of: "\"", with: "&quot;")
        return s
    }
}
